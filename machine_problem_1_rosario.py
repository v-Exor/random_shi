# -*- coding: utf-8 -*-
"""Machine Problem 1-Rosario.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j0fe1cN6vkq7VEtit9jkQIZ5C0Dae0C3

Enhanced mini expert system: University Logic Rules
With CSV Logging for Record-Keeping
"""

import csv
from datetime import datetime

#---Logic Functions----
def impl(P, Q):
  return (not P) or Q # Implication (P -> Q)

def tf(b: bool) -> str:
  return "T" if b else "F"

#---Logger-----------
def log_result(student_name, rule_name, result):
  with open("logic_results.csv", "a", newline="") as file:
    writer = csv.writer(file)
    writer.writerow([datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                     student_name, rule_name, result])

#------Rule 1:Attendance-----
def attendance_rule(student_name):
  print("\n--- Attendance Rule Checker ---")
  late = input("Is the student late? (T/F): ").strip().upper() == "T"
  excuse = input("Did the student bring an excuse letter? (T/F):" ).strip().upper() == "T"

  result = impl(late, excuse)
  outcome = "Satisfied ✔️" if result else "Violated ❌"

  print(f"P = {tf(late)} (Late), Q = {tf(excuse)} (Excuse Letter)")
  print("Result:", outcome)

  log_result(student_name, "Attendance Rule", outcome)

#----Rule 2: Grading-----
def grading_rule(student_name):
    print("\n--- Grading Rule Checker ---")
    try:
        grade = float(input("Enter student grade: "))
    except ValueError:
        print("Invalid grade input.")
        return

    P = grade < 75
    Q = grade >= 75
    result = impl(P, Q)
    outcome = "Satisfied ✅" if result else "Violated ❌"

    print(f"P = ({tf(P)}) (grade < 75), Q = ({tf(Q)}) (student passes)")
    print("Result:", outcome)

    log_result(student_name, "Grading Rule", outcome)


#---Rule 3: Login System---
def login_rule(student_name):
  print("\n--- Login Rule Checker ---")
  correct_password = "admin123"
  attempt = input("Enter password: ")

  P = (attempt != correct_password) #Password incorrect?
  Q = (attempt == correct_password) #Access granted if correct
  result = impl(P, Q)
  outcome = "Access granted ✔️" if result else "Access denied ❌"

  print(f"P = {tf(P)} (Password Incorrect), Q = {tf(Q)} (Access Granted)")
  print("Result:", outcome)

  log_result(student_name, "Login Rule", outcome)

#---Rule 4: Bonus Points---
def bonus_rule(student_name):
  print(f"\n--- {student_name}'s Bonus Point Eligibility Checker ---")
  try:
    regular = input("Does the student have regular attendance? (T/F): ").strip().upper() == "T"
  except (KeyboardInterrupt, EOFError):
    return

  P = regular
  Q = regular
  result = impl(P, Q)

  outcome = "Satisfied ✅" if regular else "Violated ❌"


  print(f"P = {tf(regular)} (Regular Attendance), Q = {tf(regular)} (Eligible for Bonus)")
  print("Result:", outcome)

  log_result(student_name, "Bonus Rule", outcome)


# -----Main Menu-----
def main():
  print("--- University Logic Rules System ---")
  student_name = input("Enter student name: ").strip()

  while True:
    print("\n\n======== Main Menu ========")
    print("1) Attendance Rule Checker")
    print("2) Grading Rule Checker")
    print("3) Login Rule Checker")
    print("4) Bonus Points Checker")
    print("5) Exit")

    choice = input("Choose an option (1-5): ").strip()

    if choice == "1":
      attendance_rule(student_name)
    elif choice == "2":
      grading_rule(student_name)
    elif choice == "3":
      login_rule(student_name)
    elif choice == "4":
      bonus_rule(student_name)
    elif choice == "5":
      print("Exiting...")
      print("Results saved to logic_results.csv")
      break
    else:
      print("Invalid choice. Try again.")

if __name__ == "__main__":
  # Create CSV with headers if not exists
  with open("logic_results.csv", "a+", newline="") as file:
    file.seek(0, 2)
    if file.tell() == 0:
      writer = csv.writer(file)
      writer.writerow(["Timestamp", "Student Name", "Rule", "Outcome"])
    main()

"""# Task
Modify the provided Python code to include a new function `library_rule` that checks if a student is allowed to borrow books based on a valid ID. Integrate this function into the main menu of the program. Ensure the existing `bonus_rule` function correctly identifies violations when attendance is not regular.

## Add library rule function

### Subtask:
Create a new Python function called `library_rule` that takes the student name as input. This function will implement the logic for checking if a student is allowed to borrow books based on a valid ID.

**Reasoning**:
Define the new `library_rule` function as requested in the subtask.
"""

#---Rule 5: Library Access---
def library_rule(student_name):
  print(f"\n--- {student_name}'s Library Access Checker ---")
  try:
    valid_id = input("Does the student have a valid library ID? (T/F): ").strip().upper() == "T"
  except (KeyboardInterrupt, EOFError):
    return

  # P: Student has a valid ID, Q: Student is allowed to borrow books
  P = valid_id
  Q = valid_id # Assuming having a valid ID is the only requirement to borrow

  result = impl(P, Q)
  outcome = "Allowed to borrow ✔️" if result else "Not allowed to borrow ❌"


  print(f"P = {tf(P)} (Valid Library ID), Q = {tf(Q)} (Allowed to Borrow)")
  print("Result:", outcome)

  log_result(student_name, "Library Rule", outcome)

"""## Integrate into main menu

### Subtask:
Add a new option to the `main` function's menu to call the `library_rule` function.

**Reasoning**:
Add a new option to the main menu in the `main` function and handle the user input to call the `library_rule` function.
"""

import csv
from datetime import datetime

#---Logic Functions----
def impl(P, Q):
  return (not P) or Q # Implication (P -> Q)

def tf(b: bool) -> str:
  return "T" if b else "F"

#---Logger-----------
def log_result(student_name, rule_name, result):
  with open("logic_results.csv", "a", newline="") as file:
    writer = csv.writer(file)
    writer.writerow([datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                     student_name, rule_name, result])

#------Rule 1:Attendance-----
def attendance_rule(student_name):
  print("\n--- Attendance Rule Checker ---")
  late = input("Is the student late? (T/F): ").strip().upper() == "T"
  excuse = input("Did the student bring an excuse letter? (T/F):" ).strip().upper() == "T"

  result = impl(late, excuse)
  outcome = "Satisfied ✔️" if result else "Violated ❌"

  print(f"P = {tf(late)} (Late), Q = {tf(excuse)} (Excuse Letter)")
  print("Result:", outcome)

  log_result(student_name, "Attendance Rule", outcome)

#----Rule 2: Grading-----
def grading_rule(student_name):
    print("\n--- Grading Rule Checker ---")
    try:
        grade = float(input("Enter student grade: "))
    except ValueError:
        print("Invalid grade input.")
        return

    P = grade < 75
    Q = grade >= 75
    result = impl(P, Q)
    outcome = "Satisfied ✅" if result else "Violated ❌"

    print(f"P = ({tf(P)}) (grade < 75), Q = ({tf(Q)}) (student passes)")
    print("Result:", outcome)

    log_result(student_name, "Grading Rule", outcome)


#---Rule 3: Login System---
def login_rule(student_name):
  print("\n--- Login Rule Checker ---")
  correct_password = "admin123"
  attempt = input("Enter password: ")

  P = (attempt != correct_password) #Password incorrect?
  Q = (attempt == correct_password) #Access granted if correct
  result = impl(P, Q)
  outcome = "Access granted ✔️" if result else "Access denied ❌"

  print(f"P = {tf(P)} (Password Incorrect), Q = {tf(Q)} (Access Granted)")
  print("Result:", outcome)

  log_result(student_name, "Login Rule", outcome)

#---Rule 4: Bonus Points---
def bonus_rule(student_name):
  print(f"\n--- {student_name}'s Bonus Point Eligibility Checker ---")
  try:
    regular = input("Does the student have regular attendance? (T/F): ").strip().upper() == "T"
  except (KeyboardInterrupt, EOFError):
    return

  P = regular
  Q = regular

  result = impl(P, Q)

  outcome = "Satisfied ✅" if regular else "Violated ❌"


  print(f"P = {tf(regular)} (Regular Attendance), Q = {tf(regular)} (Eligible for Bonus)")
  print("Result:", outcome)

  log_result(student_name, "Bonus Rule", outcome)

#---Rule 5: Library Access---
def library_rule(student_name):
  print(f"\n--- {student_name}'s Library Access Checker ---")
  try:
    valid_id = input("Does the student have a valid library ID? (T/F): ").strip().upper() == "T"
  except (KeyboardInterrupt, EOFError):
    return

  P = valid_id
  Q = valid_id

  outcome = "Allowed to borrow ✔️" if valid_id else "Not allowed to borrow ❌"


  print(f"P = {tf(P)} (Valid Library ID), Q = {tf(Q)} (Allowed to Borrow)")
  print("Result:", outcome)

  log_result(student_name, "Library Rule", outcome)

#---Rule 6: Enrollment Clearance---
def enrollment_rule(student_name):
  print(f"\n--- {student_name}'s Enrollment Clearance Checker ---")
  try:
    fees_paid = input("Are fees paid? (T/F): ").strip().upper() == "T"
  except (KeyboardInterrupt, EOFError):
    return

  P = fees_paid
  Q = fees_paid

  outcome = "Enrollment Confirmed ✔️" if fees_paid else "Enrollment Denied ❌"


  print(f"P = {tf(P)} (Fees Paid), Q = {tf(Q)} (Enrollment Confirmed)")
  print("Result:", outcome)

  log_result(student_name, "Enrollment Rule", outcome)

#---Rule 7: Laboratory Access---
def laboratory_rule(student_name):
  print(f"\n--- {student_name}'s Laboratory Access Checker ---")
  try:
    safety_gear_worn = input("Is safety gear worn? (T/F): ").strip().upper() == "T"
  except (KeyboardInterrupt, EOFError):
    return

  P = safety_gear_worn
  Q = safety_gear_worn

  outcome = "Access Granted ✔️" if safety_gear_worn else "Access Denied ❌"

  print(f"P = {tf(P)} (Safety Gear Worn), Q = {tf(Q)} (Access Granted)")
  print("Result:", outcome)

  log_result(student_name, "Laboratory Rule", outcome)


# -----Main Menu-----
def main():
  print("--- University Logic Rules System ---")
  student_name = input("Enter student name: ").strip()

  while True:
    print("\n\n======== Main Menu ========")
    print("1) Attendance Rule Checker")
    print("2) Grading Rule Checker")
    print("3) Login Rule Checker")
    print("4) Bonus Points Checker")
    print("5) Library Access Checker")
    print("6) Enrollment Clearance Checker")
    print("7) Laboratory Access Checker")
    print("8) Exit")


    choice = input("Choose an option (1-8): ").strip()

    if choice == "1":
      attendance_rule(student_name)
    elif choice == "2":
      grading_rule(student_name)
    elif choice == "3":
      login_rule(student_name)
    elif choice == "4":
      bonus_rule(student_name)
    elif choice == "5":
      library_rule(student_name)
    elif choice == "6":
      enrollment_rule(student_name)
    elif choice == "7":
      laboratory_rule(student_name)
    elif choice == "8":
      print("Exiting...")
      print("Results saved to logic_results.csv")
      break
    else:
      print("Invalid choice. Try again.")

if __name__ == "__main__":
  # Create CSV with headers if not exists
  with open("logic_results.csv", "a+", newline="") as file:
    file.seek(0, 2)
    if file.tell() == 0:
      writer = csv.writer(file)
      writer.writerow(["Timestamp", "Student Name", "Rule", "Outcome"])
    main()